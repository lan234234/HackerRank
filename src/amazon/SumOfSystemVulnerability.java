package amazon;

import java.util.Stack;

public class SumOfSystemVulnerability {
    public int sumOfSystemVulnerability(int[] vulnerability) {
        int n = vulnerability.length;
        int[] L = new int[n]; // Larger than i nearest left index
        int[] R = new int[n]; // Larger or equal to i nearest right index

        // Initialize L and R
        for (int i = 0; i < n; i++) {
            L[i] = -1;
            R[i] = n;
        }

        // Form L
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && vulnerability[stack.peek()] <= vulnerability[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                L[i] = stack.peek();
            }
            stack.push(i);
        }

        // Form R
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && vulnerability[stack.peek()] < vulnerability[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                R[i] = stack.peek();
            }
            stack.push(i);
        }

        // Calculate the result
        long res = 0; // Use long to prevent overflow during intermediate calculations
        for (int i = 0; i < n; i++) {
            int x = i - L[i];
            int y = R[i] - i;
            res += (long) vulnerability[i] * (x + y) * x * y / 2;
        }

        return (int) res; // Cast back to int
    }
}
